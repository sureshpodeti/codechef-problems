#include<iostream>
#include<cmath>
using namespace std;


class SegmentTree{
  int no_of_nodes;
  int *segment_tree;
public:
  SegmentTree(int);
  void Display();
  void Build(int *,int,int,int);
  int GetSum(int,int,int,int,int);
};

SegmentTree::SegmentTree(int n){
  int height = 2*pow(2, n) -1;
  
  no_of_nodes = height;

  segment_tree = new int[height];

  //initialize the segment tree
  for(int i=0;i<no_of_nodes;++i)
    segment_tree[i] = 0;


}

void SegmentTree::Display(){
  for(int i=0;i<no_of_nodes;++i)
    cout << segment_tree[i] << " ";
  cout << endl;
}


void SegmentTree::Build(int *A, int node, int left, int right){
  if(left==right){
    segment_tree[node] = A[left]; 
    return;
  }

  int mid = left + (right-left)/2;

  //first build left,right subtree
  Build(A, 2*node+1, left, mid);
  Build(A, 2*node+2, mid+1, right);

  //update the current node
  segment_tree[node] = segment_tree[2*node+1] + segment_tree[2*node+2];
}


int SegmentTree::GetSum(int node, int node_left, int node_right, int left, int right){

  if(left<= node_left && right>=node_right){
    return segment_tree[node];
  }


  if(right<node_left || left>node_right){
     return 0;
  }
   

  int mid = node_left + (node_right - node_left)/2;
  

  int left_sum =  GetSum(2*node+1,node_left, mid, left, right);
  int right_sum = GetSum(2*node+2,mid+1, node_right, left, right);

  return left_sum + right_sum;

}

int main(){
  int A[] = {1,3,4,2};
  int n = sizeof(A)/sizeof(A[0]);

  SegmentTree segment_tree(n);
  segment_tree.Display();

  segment_tree.Build(A, 0, 0, n-1);

  segment_tree.Display();

  cout << segment_tree.GetSum(0, 0,n-1, 0,2) << endl;
  cout << segment_tree.GetSum(0, 0, n-1, 0,1) << endl;
  cout << segment_tree.GetSum(0, 0, n-1,  0,3) << endl;
  cout << segment_tree.GetSum(0, 0, n-1, 1,2) << endl;
  cout << segment_tree.GetSum(0, 0,n-1, 1,3) << endl;

  

  return 0;
}
