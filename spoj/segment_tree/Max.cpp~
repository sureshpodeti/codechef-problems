#include<iostream>
#include<cmath>

using namespace std;

class SegmentTree{
  int no_of_nodes;
  int *segment_tree;
  int *lazy_array;
public:
  SegmentTree(int *, int);
  int ComputeMidIndex(int, int);
  void Build(int, int, int, int, int, int*);
  void Display();
};

SegmentTree::SegmentTree(int *A, int n){
  int height = int(ceil(log2(n)));
  no_of_nodes = 2*int(pow(2, height))-1;
  segment_tree = new int[no_of_nodes];
  lazy_array = new int[no_of_nodes];

  for(int i=0;i<no_of_nodes;++i)
    lazy_array[i] = 0;
}
int SegmentTree::ComputeMidIndex(int node_left, int node_right){
  return node_left + (node_right - node_left)/2;
}
void SegmentTree::Build(int node, int node_left, int node_right, int left, int right, int *A){
  if(node_left==node_right){
    segment_tree[node] = A[node_left];
    return;
  }

  int mid = ComputeMidIndex(node_left, node_right);
  Build(2*node+1, node_left, mid, left, right, A);
  Build(2*node+2, mid+1, node_right, left, right , A);
  segment_tree[node] = max(segment_tree[2*node+1], segment_tree[2*node+2]);
}

void SegmentTree::Display(){
  for(int i=0;i<no_of_nodes;++i)
    cout << segment_tree[i] << " ";
  cout << endl;
  
}
int main(){
  int A[] = {1,3,2,4};
  int n = sizeof(A)/ sizeof(A[0]);

  SegmentTree segment_tree(A, n);
  segment_tree.Display();
  return 0;
}
