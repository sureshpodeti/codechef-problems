#include<iostream>
#include<cmath>
using namespace std;

class SegmentTree{
  int no_of_nodes;
  int *segment_tree, *lazy_array, *flip;
public:
  SegmentTree(int);
  void Display();
  void RangeUpdate(int, int, int, int, int);
  int RangeQuery(int, int, int, int, int);
  int ComputeMidIndex(int,int);
};

SegmentTree::SegmentTree(int n){
  int height = int(ceil(log2(n)));
  no_of_nodes = 2*int(pow(2, height))-1;

  segment_tree = new int[no_of_nodes];
  lazy_array = new int[no_of_nodes];
  flip = new int[no_of_nodes];

  for(int i=0;i<no_of_nodes;++i)
    segment_tree[i] = lazy_array[i] = flip[i] = 0;
}
int SegmentTree::ComputeMidIndex(int node_left, int node_right){
  return node_left + (node_right - node_left)/2;
}
void SegmentTree::RangeUpdate(int node, int node_left, int node_right, int left, int right){
  if(lazy_array[node]){
    segment_tree[node] = (node_right - node_left+1)*flip[node];
    if(node_left!=node_right){
      lazy_array[2*node+1] = lazy_array[node];
      lazy_array[2*node+2] = lazy_array[node];
      flip[2*node+1] = !flip[2*node+1];
      flip[2*node+2] = !flip[2*node+2];
    }
    lazy_array[node] = flip[node] = 0;
  }

  if(left>node_right || right<node_left)
    return;

  if(left<=node_left && right>=node_right){
    segment_tree[node] = (node_right-node_left+1)*flip[node];
    if(node_left!=node_right){
      lazy_array[2*node+1] = 1;
      lazy_array[2*node+2] = 1;
      flip[2*node+1] = !flip[2*node+1];
      flip[2*node+2] = !flip[2*node+2];
    }
    return;
  }

  int mid=ComputeMidIndex(node_left, node_right);
  RangeUpdate(2*node+1, node_left, mid, left, right);
  RangeUpdate(2*node+2, mid+1, node_right, left, right);
  segment_tree[node] = segment_tree[2*node+1] + segment_tree[2*node+2];
}
int SegmentTree::RangeQuery(int node, int node_left, int node_right, int left, int right){
  if(lazy_array[node]){
    segment_tree[node] = (node_right - node_left+1)*flip[node];
    if(node_left!=node_right){
      lazy_array[2*node+1] = lazy_array[node];
      lazy_array[2*node+2] = lazy_array[node];
      flip[2*node+1] = !flip[2*node+1];
      flip[2*node+2] = !flip[2*node+2];
    }
    lazy_array[node] = flip[node] = 0;
  }

  if(left>node_right || right<node_left)
    return 0;

  if(left<=node_left && right>=node_right){
    segment_tree[node] = (node_right - node_left+1);
    if(node_left!=node_right){
      lazy_array[2*node+1] = 1;
      lazy_array[2*node+2] = 1;
      flip[2*node+1] = !flip[2*node+1];
      flip[2*node+2] = !flip[2*node+2];
    }
    return segment_tree[node];
  }

  int mid = ComputeMidIndex(node_left, node_right);
  int a = RangeQuery(2*node+1, node_left, mid, left, right);
  int b = RangeQuery(2*node+2, mid+1, node_right, left, right);
  return a+b;
}

void SegmentTree::Display(){
  for(int i=0;i<no_of_nodes;++i)
    cout << segment_tree[i]<< " ";
  cout << endl;
}

int main(){
  int n;
  cin >> n;
  SegmentTree segment_tree(n);
  segment_tree.RangeUpdate(0, 0, n-1, 2, 5);
  cout << segment_tree.RangeQuery(0, 0, n-1, 1,6) << endl;
  segment_tree.RangeUpdate(0, 0, n-1, 1, 3);

  cout << segment_tree.RangeQuery(0, 0, n-1, 1, 6) << endl;

  return 0;
}
