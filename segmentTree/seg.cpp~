#include<iostream>

using namespace std;

class SegmentTree{
  int no_of_nodes;
  int *segment_tree, *lazy_array;

public:
  SegmentTree();
  int ComputeMidIndex();
};

SegmentTree::SegmentTree(int *A, int n){
  int height = int(ceil(log2(n)));
  no_of_nodes = 2*int(pow(2, height))-1;

  segment_tree = new int[no_of_nodes];
  lazy_array = new int[no_of_nodes];

  for(int i=0;i<no_of_nodes;++i)
    lazy_array[i] = 0;

  Build(0, 0, n-1, A);
}

int SegmentTree::ComputeMidIndex(int node_start, int node_end){
  return node_start + (node_end - node_start)/2;
}

void SegmentTree::Build(int node, int node_start, int node_end, int *A){
  if(node_start==node_end){
    segment_tree[node] = A[node_start];
    return;
  }

  int mid = ComputeMidIndex(node_start, node_end);
  Build(2*node+1, node_start, mid, A);
  Build(2*node+2, mid+1, node_end, A);
  segment_tree[node] = segment_tree[2*node+1] + segment_tree[2*node+2];
}


int SegmentTree::RangeQuery(int node, int node_start, int node_end, int left, int right){

  if(lazy_array[node]){
    segment_tree[node] += (node_end - node_start+1)*lazy_array[node];

    if(node_left!=node_right){
      lazy_array[2*node+1] += lazy_array[node];
      lazy_array[2*node+2] += lazy_array[node];
    }

    lazy_array[node] = 0;
  }

  if(left>node_end || right< node_start){
    
  }
  

  int mid = ComputeMidIndex(node_start, node_end);
  int a = RangeQuery(2*node+1, node_start, mid, left, right);
  int b = RangeQuery(2*node+2, mid+1, node_end, left, right);

  return a + b;
}



int main(){


  
  return 0;
}
