#include<iostream>
using namespace std;

class MinHeap{
  int *minHeap;
  int heapSize;
  int heapCapacity;
public:
  MinHeap(int);
  int ParentInex(int);
  int LeftIndex(int);
  int RightIndex(int);
};

MinHeap::MinHeap(int cap){
  heapCapacity = cap;
  heapSize = 0;
  minHeap = new int[heapCapacity];
}

int MinHeap::ParentIndex(int i){
  return (i-1)/2;
}

int MinHeap::LeftIndex(int i){
  return 2*i+1;
}
int MinHeap::RightIndex(int i){
  return 2*i+2;
}
void MinHeap::Display(){
  for(int i=0;i<heapSize;++i)
    cout << minHeap[i] << " ";
  cout << endl;
}

int MinHeap::GetMin(){
  return minHeap[0];
}

void MinHeap::InsertKey(int key){
  if(heapSize>=heapCapacity){
    cout << "Insert not possible: Overflow" << endl;
    return;
  }

  minHeap[heapSize] = key;
  int i = heapSize;
  heapSize++;

  while(i!=0 && minHeap[ParentIndex(i)] >minHeap[i]){
    Swap(&minHeap[ParentIndex(i)], &minHeap[i]);
    i = ParentIndex(i);
  }
}

int main(){
  return 0;
}
